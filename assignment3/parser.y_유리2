%{
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <malloc.h>

#include "glob.h"

int type_int=0;
int type_void=0;

void line(int);
extern printError();
extern yylex();
extern yyerror(s);
%}

%token TIDENT TNUMBER TCONST TELSE TIF TINT TRETURN TVOID TWHILE
%token TADDASSIGN TSUBASSIGN TMULASSIGN TDIVASSIGN TMODASSIGN 
%token TOR TAND TEQUAL TNOT TNOTEQU TGREATE TLESSE TLESS TGREAT TINC TDEC 
%token TPLUS TMINUS TMULTIPLY TDIVIDE TMOD TNOT TASSIGN TLPAREN TRPAREN TCOMMA TSEMICOLON
%token TLBRACKET TRBRACKET TLBRACE TRBRACE
%nonassoc LOWER_THEN_ELSE
%nonassoc TELSE

%%
mini_c 		: translation_unit				
			;
translation_unit 	: external_dcl					
			| translation_unit external_dcl		
			;

external_dcl 	: function_def					
		  	| declaration					
			| TIDEN TSEMICOLON
			| TIDEN error
			{
				yyerrok;
				printError(wrong_st);
			}
			;

function_def 	: function_header compound_st			
			| function_header TSEMICOLON
			| function_header error
			{
				look_tmp->type=0;
				yyerrok;
				printError(wrong_funcdef);
			}
			;

function_header 	: dcl_spec function_name formal_param	
			;

dcl_spec 		: dcl_specifiers					
			;

dcl_specifiers 	: dcl_specifier					
		 	| dcl_specifiers dcl_specifier		
			;

dcl_specifier 	: type_qualifier			
			| type_specifier					
			;

type_qualifier 	: TCONST					
			;

type_specifier 	: TINT 						{type_int=1;}					
		 	| TVOID						{type_void=1;}
			;

function_name 	: TIDENT						
			{
				if(look_id->type==0 || look_id->type==5)
				{
					look_id->type=4;
					type_int=0;
					type_void=0;
					look_tmp=look_id;
				}
			}
			;
				
formal_param 	: TLPAREN opt_formal_param TRPAREN 	
			;

opt_formal_param 	: formal_param_list				
		   	|							
			;

formal_param_list : param_dcl				
		    	| formal_param_list TCOMMA param_dcl 	
			;






















param_dcl 		: dcl_spec declarator				
			;

compound_st 	: TLPAREN opt_dcl_list opt_stat_list TRPAREN 
			| TLPAREN compound error
			{
				yyerrok;
				printError(nobrace);
			}
			;

opt_dcl_list 	: declaration_list			
			|							
			;

declaration_list 	: declaration					
			| declaration_list declaration 		
			;

declaration 	: dcl_spec init_dcl_list TSEMICOLON
			{
				type_int=0;
				type_void=0;
			}
			;

init_dcl_list 	: init_declarator				
			| init_dcl_list TCOMMA init_declarator 	
			;

init_declarator 	: declarator					
		 	| declarator TEQUAL TNUMBER			
			;

declarator 		: TIDENT						
	     		| TIDENT TLBRACKET opt_number TRBRACKET		
			;

opt_number 		: TNUMBER						
	     		|							
			;

opt_stat_list 	: statement_list				
		 	|							
			;

statement_list 	: statement					
		 	| statement_list statement 			
			;
statement 		: compound_st					
	   		| expression_st					
	   		| if_st						
	   		| while_st						
	   		| return_st						
	   		;

expression_st 	: opt_expression TSEMICOLON	
			| expression error
			{
				yyerrok;
				printError(nosemi);
			}		
			;

opt_expression 	: expression					
		 	|							
			;

if_st 		: TIF TLPAREN expression TRPAREN statement 	
			| TIF TLPAREN expression TRPAREN statement TELSE statement 	
			{
				yyerrok;
				printError(wrong_funcdef);
			}
			;

while_st 		: TWHILE TLPAREN expression TRPAREN statement 
			| TWHILE TLPAREN TRPAREN
			{
				yyerrok;
				printError(wrong_funcdef);
			}
			;

return_st 		: TRETURN opt_expression TSEMICOLON	
			| TRETURN expression error
			{
				yyerrok;
				printError(nosemi);
			}
			;

expression 		: assignment_exp					
			;

assignment_exp 	: logical_or_exp					
			| unary_exp TEQUAL assignment_exp 		
			| unary_exp TADDASSIGN assignment_exp 	
			| unary_exp TSUBASSIGN assignment_exp 	
			| unary_exp TMULASSIGN assignment_exp 
			| unary_exp TDIVASSIGN assignment_exp 
			| unary_exp TMODASSIGN assignment_exp
			{
				yyerrok;
				printError(wrong_st);
			} 	
			;

logical_or_exp 	: logical_and_exp					
			| logical_or_exp TOR logical_and_exp 
			{
				yyerrok;
				printError(wrong_st);
			}	
			;

logical_and_exp 	: equality_exp					
		 	| logical_and_exp TAND equality_exp 
			{
				yyerrok;
				printError(wrong_st);
			}		
			;

equality_exp 	: relational_exp				
			| equality_exp TEQUAL relational_exp 	
			| equality_exp TNOTEQU relational_exp 	
			{
				yyerrok;
				printError(wrong_st);
			}	
			;

relational_exp 	: additive_exp 					
			| relational_exp TLESS additive_exp 	
			| relational_exp TGREAT additive_exp 	
			| relational_exp TGREATE additive_exp 
			| relational_exp TLESSE additive_exp 
			{
				yyerrok;
				printError(wrong_st);
			}		
			;

additive_exp 	: multiplicative_exp			
			| additive_exp TPLUS multiplicative_exp 	
			| additive_exp TMINUS multiplicative_exp 
			{
				yyerrok;
				printError(wrong_st);
			}		
			;

multiplicative_exp : unary_exp					
		    	| multiplicative_exp TMULTIPLY unary_exp 	
		    	| multiplicative_exp TDIVIDE unary_exp 	
		    	| multiplicative_exp TMOD unary_exp 	
			{
				yyerrok;
				printError(wrong_st);
			}	
			;

unary_exp 		: postfix_exp					
	   		| TMINUS unary_exp					
	   		| TNOT unary_exp					
	   		| TINC unary_exp					
	   		| TDEC unary_exp					
			;

postfix_exp 	: primary_exp					
	      	| postfix_exp TLBRACKET expression TRBRACKET	
	      	| postfix_exp TLPAREN opt_actual_param TRPAREN 	
	      	| postfix_exp TINC				
	      	| postfix_exp TDEC		
			{
				yyerrok;
				printError(nobracket);
			}			
			;

opt_actual_param 	: actual_param					
		  	|							
			;

actual_param 	: actual_param_list			
			;
actual_param_list : assignment_exp			
		   	| actual_param_list TCOMMA assignment_exp 
			;
primary_exp 	: TIDENT					
	     		| TNUMBER						
	     		| TLPAREN expression TRPAREN		
			;
%%
void line(int n){
printf("\t %d \t",n);
}
